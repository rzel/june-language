import something.Other
import another.Something

class<T is Comparable<T>> is Map<String, T> & Happy:

(a + b) * 4

numbers.where def(it) {0 <= it && it < 1}.select do(hmm) {hmm * 2}

if (a == b) {
	doSomething.a
	c.d() != e
	break: true
} else {
	doOtherStuff()
	continue MORE: stuff.andAgain()
}

9.toString()

a() - a.b?.c(1, 2) + b.glub[duper, 5][glum].brr[a + b] - c

class Name<What>

role Fish {
	def happy() throws Fish | Bear {
		out.println(this)
		if(true) {throw apples}
		return bob
	}
}

private:

val a = [
	a:
		[1, c],
	b: 2
]
var b = [:]

#public static:

var c = [
]
var d = [1, 2
3]
var e = [
		:
	]

public:

final ...
override def hi<Bloo>(
		a* # comments count as EOL only
		b: b.B?) {
	def that<That, There>(): ...
		That;
	var b: Double ...
		=
			5
	def c(): List<java.util.Map<
		String
		String?
	>>?
	val d = a(4, [1, c]);
	var c = ['a' 'gain', 'b', d]
	var e = [`Yes with `any' character.
	]
	b[1] = 'c'
	b = []
}
