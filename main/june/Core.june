public static:

native def ...
	if<Result>(test: Boolean, action: do Result) ...
	elseif*(test: do Boolean, action: do Result) ...
	else?(action: do Result): ...
	Result?

def for<Result>(resource: Closeable, action: do(Object) Result): Result {
	try {
		action(resource)
	} finally {
		resource.close()
	}
}

def for<Item, Result>(items: Array<Item>, action: do(Item, Integer) Result): Result {
	var i = 0
	while(i < items.length) {
		val result = action(items[i], i)
		i = i + 1
		result
	}
}

def for<Item, Result>(items: Iterable<Item>, action: do(Item, Iterator<Item>) Result): Result {
	var iterator = items.iterator()
	while(iterator.hasNext()) {
		action(iterator.next(), iterator)
	}
}

native def synchronized<Result>(action: do Result): Result

native def ...
	try<Result>(action: do Result) ...
	catch<Type is Throwable>*($class: Class<Type>, action: do(Type)) ...
	finally?(action: do): ...
	Result

native def switch<Item, Result>(item: Item, handlers: Map<Item, do Result>): Result

native def while<Result>(test: do Boolean, action: do Result): Result
